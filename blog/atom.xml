<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"> <title>(随筆 :tendency 自堕落)</title> <link href="https://madosuki.github.io/blog"/> <link type="application/atom+xml" rel="self" href="https://madosuki.github.io/blog/atom.xml"/> <updated>Tue, 02 Sep 2025 14:00:23 +0900</updated> <author> <name>madosuki</name> </author> <entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Live2D-Cubism-5-SDK-for-Web-R5-beta-1-Frameworkについて.html"/> <title>Live2D Cubism 5 SDK for Web R5 beta 1 Frameworkについて</title> <published>2025-09-02 13:24:31</published> <updated>2025-09-02 13:24:31</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;私は、&lt;a href=&quot;https://github.com/madosuki/live2dManager&quot; &gt;https://github.com/madosuki/live2dManager&lt;/a&gt; というCubism Sdk For Webを使ったライブラリを個人的に作成している。&lt;br/&gt;
Cubism 5.3のbeta 1が出たということで早速submoduleを更新してドキュメントに書かれていたcreateRendererも修正して動作確認を行ってみたところ以下のエラーがConsoleに出力されmodelのdrawが失敗した。&lt;br/&gt;
&lt;pre&gt;
&lt;code&gt;
Failed to load blend mode shaders: TypeError: Failed to execute &#039;getAttribLocation&#039; on &#039;WebGL2RenderingContext&#039;: parameter 1 is not of type &#039;WebGLProgram&#039;.
&lt;/code&gt;
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;シェーダーの読み込みに失敗したという内容だが、あまり思い当たるところがなく、ドキュメントにもChangelogにもそれらしいのが書いておらず仕方なくFrameworkのソースコードを読みに行ったところ、&lt;a href=&quot;https://github.com/Live2D/CubismWebFramework/blob/020a0dd899c62e53e65acae1723ef4ed3f80baa3/src/rendering/cubismshader_webgl.ts#L65&quot; &gt;https://github.com/Live2D/CubismWebFramework/blob/020a0dd899c62e53e65acae1723ef4ed3f80baa3/src/rendering/cubismshader_webgl.ts#L65&lt;/a&gt; でビルド時ではなく実行時に&#039;../../Framework/Shaders/WebGL/&#039;という相対パスからシェーダーファイル読みだす処理に変更されていた。これ以前は文字列として変数に格納されていたシェーダーを読むという形式だった。&lt;br/&gt;
Nativeの方は一つ前のバージョンでこの形式に変更されているようで、Nativeは恐らくdllと同じ階層にあるディレクトリから読みに行く形式となっており、CMakeも該当のディレクトリを自動生成するぽく単にそれを同梱すれば良いが、Webの方は単純にそうは行かず、CORSの問題もある上に、Frameworkを使ったライブラリがnode_modeuleに配置されている時などにどこに配置したらいいか困るなど、あまりにも取り扱いが厄介で、Nativeの設計をそのまま無理矢理に持って来てしまったという感じで非常にげんなりした。&lt;br/&gt;
ファイル分離した方がメンテナンス性があるというのはわかるが、viteなどにある機能を使ってimport fromでビルド時に埋め込むようにすべきであると思う。&lt;br/&gt;
この記事を投稿した時点ではドキュメントにシェーダーファイルの位置について記述されておらず、流石に書いて欲しいという気持ちが強い。&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/lackのsessionミドルウェアでpostgresqlを使用する際のメモ.html"/> <title>lackのsessionミドルウェアでpostgresqlを使用する際のメモ</title> <published>2025-03-18 10:56:32</published> <updated>2025-03-18 10:56:32</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;Caveman2ではapp.lisp内でlackのbuilderを使ってappを生成してそれに対してclackupを動かすという流れになっている。&lt;br/&gt;
このbuilderで
&lt;pre&gt;
&lt;code&gt;
 (:session
  :store (make-dbi-store :connector (lambda ()
                                      (apply #&#039;dbi:connect
                                             (your-package-name.db:connection-settings)))))
&lt;/code&gt;
&lt;/pre&gt;
とするとRDBMSにセッション情報を保存できるようになる。&lt;br/&gt;
README.mdのこの箇所にも書かれているが詳細は&lt;a href=&quot;https://github.com/fukamachi/lack/blob/master/src/middleware/session/store/dbi.lisp&quot; &gt;ソース&lt;/a&gt; を読まないわからない。&lt;br/&gt;
ソースを読めばわかるがfetch-sessionメソッドがwith-db-connectionマクロを使用していて自動的に接続を閉じれるようになっている。&lt;br/&gt;
しかし、それはdisconnectorキーワードで閉じる際に使用する関数を指定している場合であり、初期値はnilなのでただ単に上記のようにすると開きっぱなしになってしまう。&lt;br/&gt;
なので、下記の様にdisconnectorキーワード使って関数を渡してやる必要がある。&lt;br/&gt;
&lt;pre&gt;
&lt;code&gt;
 (:session
  :store (make-dbi-store :connector (lambda ()
                                      (apply #&#039;dbi:connect
                                             (your-package-name.db:connection-settings)))
                         :disconnector #&#039;dbi:disconnect)
  :state (make-cookie-state
          :httponly t
          :cookie-key &amp;quot;session&amp;quot; ;; default value is lack.session
          :samesite :strict
          :secure t
          :expires 1800))
&lt;/code&gt;
&lt;/pre&gt;
make-cookie-stateの箇所は必要が無いが使い方のメモとして残しておく。　　&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Ubuntu-2304-Lunar-LobsterでHDMIサウンド出力が動画を再生する度に遅延する現象について.html"/> <title>Ubuntu 23.04 Lunar LobsterでHDMIサウンド出力が動画を再生する度に遅延する現象について</title> <published>2023-08-30 18:22:22</published> <updated>2023-08-30 18:22:22</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;UbuntuでHDMIサウンド出力をすると遅延する現象自体は前のバージョンでも有り，デフォルトでalsaのサスペンド機能が有効になっていて，次の動画を再生すると復帰処理によって冒頭部分が聞けない問題がありました．  &lt;/p&gt;

&lt;p&gt;勿論音が鳴ってからシークして冒頭に戻せば良いのですが面倒ですしストレスです．&lt;br/&gt;
Ubuntu 23.04では/etc/wireplumber/main.lua.d/50-alsa-config.lua&lt;br/&gt;
の&lt;code&gt;[&amp;quot;session.suspend-timeout-seconds&amp;quot;]&lt;/code&gt;箇所のコメントアウトを解除して値を0にしましょう．&lt;br/&gt;
&lt;code&gt;[&amp;quot;session.suspend-timeout-seconds&amp;quot;] = 0,&lt;/code&gt;&lt;br/&gt;
/etc/wireplumberはUbuntuではデフォルトで存在せず，手動で生成する必要が有ります．&lt;br/&gt;
/usr/share/wireplumberディレクトリをコピーして使うのが楽です．尚現在ユーザーのみの場合は~/.config/下にwireplumberディレクトリを作っても良いです．&lt;br/&gt;
同様に/etc/pipewireも/usr/share/pipewireディレクトリをコピーして作っておくのも良いんじゃないかと思います．~/.config下でも良いのは同じです．  &lt;/p&gt;

&lt;p&gt;できたら&lt;br/&gt;
&lt;code&gt;systemctl restart pipewire pipewire-pulse wireplumber --user&lt;/code&gt;&lt;br/&gt;
するか，PCを再起動すればalsaのサスペンド機能が無効化されます．  &lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Caveman2で明示的なセッションIDの更新とセッション終了方法についてのメモ.html"/> <title>Caveman2で明示的なセッションIDの更新とセッション終了方法についてのメモ</title> <published>2021-07-09 22:30:43</published> <updated>2021-07-09 22:30:43</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;ログインログアウト機能を実装する際，ログイン時にセッションIDの変更とログアウト時にセッションを終了させる処理を入れることがセッションハイジャックへの対策の一つであるが，方法がドキュメントには載っていない．&lt;br/&gt;
なので適当に検索してみたら&lt;a href=&quot;http://diary.wshito.com/comp/lisp/clack/lack-middleware-session/#sec-example3&quot; &gt;http://diary.wshito.com/comp/lisp/clack/lack-middleware-session/#sec-example3&lt;/a&gt;が引っかかった．&lt;br/&gt;
lackを直接使ってる場合の方法ではあるが，役に立った．&lt;br/&gt;
envにある:lack.session.optionsにある値を見ているらしい．&lt;br/&gt;
とはいえ記事の例はあくまでもlackを直接使っている場合の物でCaveman2からenvを操作する方法がわからない．&lt;br/&gt;
どうしたらいいかとCaveman2のソースを読んでみたら，caveman.lispでlack.requestからrequest-envをインポートしているのがわかった．&lt;br/&gt;
これはlack/src/requst.lispにあり，構造体requestにあるenvスロットのアクセサーだ．このスロットというのはメンバ変数の様なものだ．&lt;br/&gt;
Common Lispでは構造体のスロットへのアクセスは&amp;quot;(構造体名-スロット名 インスタンス)&amp;quot;という形で行う．&lt;br/&gt;
ともかくこのenvが前述した記事で使っているenvでは？　と当たりをつけて試してみたらそうだった．&lt;br/&gt;
尚インスタンスは&amp;quot;*request*&amp;quot;としてningleからインポート&amp;amp;エクスポートされているので，&lt;br/&gt;
&lt;code&gt;
(setf (getf (getf (request-env *request*) :lack.session.options) :change-id) t)
&lt;/code&gt;&lt;br/&gt;
とすればセッションIDの更新ができた．&lt;br/&gt;
change-idをexpireにすればセッションの終了ができる．&lt;br/&gt;
&lt;code&gt;
(setf (getf (getf (request-env *request*) :lack.session.options) :expire) t)
&lt;/code&gt;  &lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/インストール済みのGentooをセキュアブートで起動できるように設定した時のメモ.html"/> <title>インストール済みのGentooをセキュアブートで起動できるように設定した時のメモ</title> <published>2021-07-03 09:42:56</published> <updated>2021-07-03 09:42:56</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;前提条件としてセキュアブートをオフにしてインストールしたGentooかつ，ブートローダーにGRUB2をinitにsystemdを採用し尚且つsys-boot/shim，app-crypt/sbsigntools，sys-boot/efibootmgrをインストール済みの状態であることを想定している．&lt;br/&gt;
GRUBインストール時のオプションは&lt;br/&gt;
&lt;code&gt;
sudo grub-install --target=x86_64-efi --efi-directory=/boot/efi --modules=&amp;quot;tpm&amp;quot; --disable-shim-lock
&lt;/code&gt;&lt;br/&gt;
を想定．これについては&lt;a href=&quot;https://forum.manjaro.org/t/grub-fails-to-load-with-shim-and-secure-boot-enabled/62522/2&quot; &gt;こちら&lt;/a&gt;を参照．しておかないとブート時にエラーが出る．UEFIでTPMを有効しないといけないかは検証していない（多分要る気はする）．&lt;br/&gt;
セキュアブートとTPMの有効方法はマザーボードごとに違ったりするのでここでは触れない．&lt;br/&gt;
またここに書かれていることは2021-07-03時点の物であり，環境差もあるので動作を保証しない．  &lt;/p&gt;

&lt;h1&gt;setup shim&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;
cp /usr/share/shim/BOOTX64.EFI /boot/efi/EFI/gentoo/ &amp;amp;&amp;amp; cp /usr/share/shim/mmx64.efi /boot/efi/EFIT/gentoo/
&lt;/code&gt;  &lt;/p&gt;

&lt;h2&gt;EFIに登録する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;
efibootmgr -c -d /dev/nvme0n1 -p 1 -L &amp;quot;shim&amp;quot; -l &amp;quot;\EFI\gentoo\BOOTX64.EFI&amp;quot; 
&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;dオプションはEFIパーティションのあるデバイスをpオプションにはパーティションナンバーを入れる．  &lt;/p&gt;

&lt;h1&gt;Sign to kernel and grub&lt;/h1&gt;

&lt;p&gt;opensslを使う．&lt;br/&gt;
&lt;a href=&quot;https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#shim&quot; &gt;参考URL:https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#shim&lt;/a&gt;&lt;br/&gt;
&lt;code&gt;
openssl req -newkey rsa:4096 -nodes -keyout MOK.key -new -x509 -sha256 -subj &amp;quot;/CN= My Key /&amp;quot; -out MOK.crt  
&lt;/code&gt;&lt;br/&gt;
daysオプションで有効期限を設定した方が良いかと思ったが煩わしいのでやめた．  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;
openssl x509 -outform DER -in MOK.crt -out MOK.cer
&lt;/code&gt;&lt;br/&gt;
 このcerファイルは/boot/efi/EFI/gentoo/に放り込んでおく．&lt;br/&gt;
 セキュアブートで起動した時に証明書が無いとmmx64.efiが起動し，keyを指定してenrollしろと言われるのでMOK.cerを置いた場所を指定する必要があるのでよしなにして．  &lt;/p&gt;

&lt;p&gt;&lt;code&gt;
 sbsign --key MOK.key --cert MOK.crt --output vmlinuz-path vmlinuz-path
&lt;/code&gt;&lt;br/&gt;
vmlinuz-pathのところを/boot/下にある署名したいvmlinuzファイルのパスに置き換えて実行．  &lt;/p&gt;

&lt;h2&gt;Example:&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;
sbsign --key MOK.key --cert MOK.crt --output /boot/efi/EFI/gentoo/grubx64.efi /boot/efi/EFI/gentoo/grubx64.efi
&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;以上．&lt;br/&gt;
UEFIに戻ってセキュアブートを有効にして，shimラベルのやつをブートに指定すればmmx64.efiが起動して証明書を指定するように言われるのでそれをして再起動すればブートできるだろう．  &lt;/p&gt;

&lt;h1&gt;追記&lt;/h1&gt;

&lt;p&gt;カーネルやGRUBをアップデートする度に署名する必要がある．&lt;br/&gt;
またgrub-mkconfigで設定をアップデートする際にEFIが書き換えられて手動定義したラベルが消えるっぽいのでefibootmgrで登録し直す必要があるだろう(回避策があるかもしれないが調べるの面倒なので)．  &lt;/p&gt;

&lt;h1&gt;参考文献&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#shim&quot; &gt;https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#shim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.gentoo.org/viewtopic-t-1132536-start-0.html&quot; &gt;https://forums.gentoo.org/viewtopic-t-1132536-start-0.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forum.manjaro.org/t/grub-fails-to-load-with-shim-and-secure-boot-enabled/62522/2&quot; &gt;https://forum.manjaro.org/t/grub-fails-to-load-with-shim-and-secure-boot-enabled/62522/2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Fableプロジェクトを1から手動で作る方法的な私的メモ.html"/> <title>Fableプロジェクトを1から手動で作る方法的な私的メモ</title> <published>2021-05-29 11:26:48</published> <updated>2021-05-29 11:26:48</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;FableはF#コードをJavaScriptに変換してくれるやつです．&lt;br/&gt;
サンプルを試すだけなら&lt;a href=&quot;https://github.com/fable-compiler/fable3-samples&quot; &gt;https://github.com/fable-compiler/fable3-samples&lt;/a&gt;をgit cloneしてよしなにすれば良いのですが，自プロジェクトだと1から用意したくなります．なりますよね？  &lt;/p&gt;

&lt;p&gt;公式チュートリアルだとテンプレートをインポートさせてdotnet newで簡単にできるようにする方法が紹介されていますが，この記事執筆時点では公式が用意しているテンプレートですとFable3に対応していないという注意書きも書かれています．  &lt;/p&gt;

&lt;p&gt;仕方ないので手動で用意するかってなりました．まぁ私が知らないだけでもっとスマートなやり方がある気がしますが．  &lt;/p&gt;

&lt;p&gt;dotnet sdkとnodejsのインストールはmustなので割愛します．  &lt;/p&gt;

&lt;p&gt;上記のサンプルにありますbrowserサンプルを参考にしているので適宜参照します．  &lt;/p&gt;

&lt;p&gt;webpack.config.jsの中身とかはそこからの流用です．  &lt;/p&gt;

&lt;p&gt;それと間違っていることを書いてしまっている可能性があるのでここに書いてあることは参考程度に留めておくのがいいです．  &lt;/p&gt;

&lt;p&gt;一番良いのは公式のドキュメントやサンプルをチェックしていって試行錯誤していくことですが，ただそれだと私の様なアホだとサンプルコード読んでお終いとなりがちなので（私だけかもしれないが）自分でFableプロジェクトを作る方法ぐらいはここに自分用にメモして忘れた時に読む用にというのがこの記事の目的です．  &lt;/p&gt;

&lt;h1&gt;Process&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step 1: Create Project Directory&lt;br/&gt;
適当にmkdirでproject dirを作りましょう．  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 2: Create package.json&lt;br/&gt;
project dir内でnpm initなりyarn initなりでpackage.jsonを作成しておきます．  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 3: Install dependencies webpack&lt;br/&gt;
npmなら--save-dev，yarnなら-dをつけて，webpack，webpack-cli，webpack-dev-serverをインストールしておきます．  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 4: Write Script in package.json  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&quot;scripts&quot;: {
    &quot;postinstall&quot;: &quot;dotnet tool restore&quot;,
    &quot;start&quot;: &quot;dotnet fable watch src --run webpack serve&quot;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をpackage.json内に記述してください．&lt;br/&gt;
上記のはfable3-samples/browser内のをコピペしただけですので，単純にそっちからコピーしてきても良いです．  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 5: Create webpack.config.js&lt;br/&gt;
webpack.config.jsをproject dir内で作成し，&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;var path = require(&quot;path&quot;)
module.exports = {
    mode: &quot;development&quot;,
    entry: &quot;./src/App.fs.js&quot;,
    output: {
        path: path.join(__dirname, &quot;./public&quot;),
        filename: &quot;bundle.js&quot;,
    },
    devServer: {
        contentBase: &quot;./public&quot;,
        port: 8080,
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;をwebpack.config.js内に記述します．&lt;br/&gt;
上記のはfable3-samples/browser内のをコピペしただけですので，単純にそっちからコピーしてきても良いです．  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 6: Install Fable command&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;dotnet new tool-manifest # if you are setting up this repo
dotnet tool install --local Fable --version 3.2.1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上をproject dir内で行うと.configディレクトリとその中にdotnet-tools.jsonが作られます．&lt;br/&gt;
これでscriptを動かすために必要なコマンドが揃いました．  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step 7: Create src directory&lt;br/&gt;
今まで書いてきた設定ファイルに沿ったdir nameにします．&lt;br/&gt;
つまりproject dirでmkdir srcします．&lt;br/&gt;
次からはこのsrcディレクトリ内で作業します  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 8: Create App.fsproj  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Compile Include=&quot;App.fs&quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&quot;Fable.Browser.Dom&quot; Version=&quot;2.4.4&quot; /&amp;gt;
    &amp;lt;PackageReference Include=&quot;Fable.Core&quot; Version=&quot;3.2.7&quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;App.fsprojに上記内容を記述．  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 9: Create App.fs&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;module App
open Fable.Core.JsInterop

let window = Browser.Dom.window

let mutable hOne : Browser.Types.HTMLElement = unbox window.document.getElementById &quot;title&quot;
hOne.innerText &amp;lt;- &quot;Replaced on Fable&quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記を記述．&lt;br/&gt;
このファイルがjsに変換されます．  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 10: Set public files&lt;br/&gt;
project dirに戻り，mkdir publicして，中にindex.htmlを用意します．&lt;br/&gt;
index.htmlの中身は&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Fable&amp;lt;/title&amp;gt;
  &amp;lt;meta http-equiv=&#039;Content-Type&#039; content=&#039;text/html; charset=utf-8&#039;&amp;gt;
  &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;
  &amp;lt;link rel=&quot;shortcut icon&quot; href=&quot;fable.ico&quot; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1 id=&quot;title&quot;&amp;gt;Test&amp;lt;/h1&amp;gt;
    &amp;lt;script src=&quot;bundle.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でいいです．  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 11: Run&lt;br/&gt;
再びproject dirに戻り，npm run startなりyarn startなりすれば動くと思います．&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Caveman2でcookieのkeyとexpiresを変更する方法.html"/> <title>Caveman2でcookieのkeyとexpiresを変更する方法</title> <published>2021-04-19 23:47:20</published> <updated>2021-04-19 23:47:20</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;Caveman2でセッションを有効するには，app.lispにあるbuilderマクロで&lt;code&gt;:session&lt;/code&gt;を書けばいいことはREADMEに書かれているのでそこは問題無いのですが，cookieのexpiresやセッション名となっているcookieキーの変更方法は書かれておらずソースを読む必要がありました．   &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fukamachi/lack/blob/master/src/builder.lisp&quot; &gt;https://github.com/fukamachi/lack/blob/master/src/builder.lisp&lt;/a&gt;を読むとlackのミドルウェアか判別して実行する展開する箇所があります．
:sessionを渡すとlack.middleware.sessionを実行するということなので，&lt;br/&gt;
&lt;a href=&quot;https://github.com/fukamachi/lack/blob/master/src/middleware/session.lisp&quot; &gt;https://github.com/fukamachi/lack/blob/master/src/middleware/session.lisp&lt;/a&gt;を読むとstateキーのデフォルトとしてmake-cookie-stateを使っているのわかります．  &lt;/p&gt;

&lt;p&gt;app.lisp内で:lack.middleware.session.state.cookieをインポートして，builder内で&lt;br/&gt;
&lt;code&gt;
 (:session
  :state (make-cookie-state
          :httponly t
          :cookie-key &amp;quot;myapp.session&amp;quot;
          :expires 1800))
&lt;/code&gt;
すればset-cookieの値が変わっているはずです．&lt;/p&gt;

&lt;p&gt;このcookie-stateは構造体であり&lt;a href=&quot;https://github.com/fukamachi/lack/blob/master/src/middleware/session/state/cookie.lisp&quot; &gt;https://github.com/fukamachi/lack/blob/master/src/middleware/session/state/cookie.lisp&lt;/a&gt;で定義されています．   &lt;/p&gt;

&lt;p&gt;「cookieを生成した現在時刻+make-cookie-stateのexpiresキーで渡した秒数」が最終的なexpiresになるのでこの例だと30分有効ということになります．  &lt;/p&gt;

&lt;p&gt;個人的にはsamesiteを入れたいのですが入り組んでいて私ではわかりづらく難航しています．   &lt;/p&gt;

&lt;p&gt;まぁ元のlackの該当箇所を書き換えてしまった方が早いですが．&lt;/p&gt;

&lt;h3&gt;追記(2021-05-07)&lt;/h3&gt;

&lt;p&gt;私がlackに出していたPRがマージされたので現在のバージョンであれば，&lt;br/&gt;
&lt;code&gt;
(:session
    :state (make-cookie-state
            :samesite :lax))
&lt;/code&gt;
の様にキーワードで渡してsamesiteキーワードに渡してやればSet-CookieにSameSite=Laxが追加されます．&lt;br/&gt;
何も指定しなければNoneになります．&lt;br/&gt;
Strictにするには:strictキーワードをどうぞ．&lt;/p&gt;

&lt;h3&gt;追記(2021/05/07 16:50 JST)&lt;/h3&gt;

&lt;p&gt;caveman2 projectのproject-name.asdの:depends-on内で&amp;quot;lack.middleware.session&amp;quot;かそれをインポートしているライブラリを指定する必要があるということを書いておくのを忘れていました．  &lt;/p&gt;

&lt;h3&gt;追記修正(2021/06/16 JST)&lt;/h3&gt;

&lt;p&gt;上記の&amp;quot;lack.middleware.session&amp;quot;ではなく&amp;quot;lack-middleware-session&amp;quot;でした．  &lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Tidalを試しにインストールした際に躓いた点.html"/> <title>Tidalを試しにインストールした際に躓いた点</title> <published>2020-11-03 10:11:15</published> <updated>2020-11-03 10:11:15</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;TidalCyclesはライブコーディングで作曲等ができるというものですが，インストールが若干面倒です．
SuperColiderとかDirtのインストールは躓く要素が無いので省きます． &lt;/p&gt;

&lt;p&gt;Tidalはwikiに書かれている方法だと導入方法がcabal install tidalですがWindows環境でどうもこれが上手く行きません．GHCIでインポートしようにも見つからないという旨のエラーが出ます． &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tidalcycles/tidal-chocolatey/issues/3&quot; &gt;https://github.com/tidalcycles/tidal-chocolatey/issues/3&lt;/a&gt;を参照すると&lt;code&gt;cabal v1-install tidal&lt;/code&gt;すると動くらしくて実際に私の環境ではこっちで動作しました． &lt;/p&gt;

&lt;p&gt;Windows上でのHaskell周りさっぱり分かりません．&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Windows10-20H2-on-KVMでvirtioを後から使う際にINACCESSIBLEBOOTDEVICEに遭遇した.html"/> <title>Windows10 20H2 on KVMでvirtioを後から使う際にINACCESSIBLE_BOOT_DEVICEに遭遇した</title> <published>2020-10-27 23:55:02</published> <updated>2020-10-27 23:55:02</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;解決方法を調べてみるとネットで転がっているのはbcdeditを使うものばかりですが，私の環境では上手くいきませんでした．&lt;br/&gt;
まぁ要するにvirtioドライバを読み込むようにすれば良いのでWindowsが入っているストレージはSATA等の正常に起動できるやつに戻しておいて，&lt;br/&gt;
ブートに関係ないセカンドストレージとして適当にvirtioなストレージを追加して普通にブートするだけでbcdeditで解決する例と同じことができます．    &lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/VOICEROIDの旧製品のインストール時のブルスク回避方法.html"/> <title>VOICEROIDの旧製品のインストール時のブルスク回避方法</title> <published>2020-09-04 08:15:05</published> <updated>2020-09-04 08:15:05</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;現行(2010-09-04時点)のWindows10ですとVOICEROID EXで認証に使われているHASPが少なくとも昔私買ったDVD版だと古くてhardlock.sysがクラッシュしてブルスクします．&lt;br/&gt;
AIのFAQ&lt;a href=&quot;https://www.ai-j.jp/qa/q6/&quot; &gt;https://www.ai-j.jp/qa/q6/&lt;/a&gt;を見るとThales社のサイトから最新版をダウンロードしてインストールすればう良いようです．&lt;br/&gt;
ボイロのインストールに失敗した後にやるとその旨のダイアログが出ますが強行すればいけます．&lt;br/&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry> </feed>