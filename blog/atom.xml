<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"> <title>(随筆 :tendency 自堕落)</title> <link href="https://madosuki.github.io/blog"/> <link type="application/atom+xml" rel="self" href="https://madosuki.github.io/blog/atom.xml"/> <updated>Sat, 29 May 2021 13:11:53 +0900</updated> <author> <name>madosuki</name> </author> <entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Fableプロジェクトを1から手動で作る方法的な私的メモ.html"/> <title>Fableプロジェクトを1から手動で作る方法的な私的メモ</title> <published>2021-05-29 11:26:48</published> <updated>2021-05-29 11:26:48</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;FableはF#コードをJavaScriptに変換してくれるやつです．&lt;br/&gt;
サンプルを試すだけなら&lt;a href=&quot;https://github.com/fable-compiler/fable3-samples&quot; &gt;https://github.com/fable-compiler/fable3-samples&lt;/a&gt;をgit cloneしてよしなにすれば良いのですが，自プロジェクトだと1から用意したくなります．なりますよね？  &lt;/p&gt;

&lt;p&gt;公式チュートリアルだとテンプレートをインポートさせてdotnet newで簡単にできるようにする方法が紹介されていますが，この記事執筆時点では公式が用意しているテンプレートですとFable3に対応していないという注意書きも書かれています．  &lt;/p&gt;

&lt;p&gt;仕方ないので手動で用意するかってなりました．まぁ私が知らないだけでもっとスマートなやり方がある気がしますが．  &lt;/p&gt;

&lt;p&gt;dotnet sdkとnodejsのインストールはmustなので割愛します．  &lt;/p&gt;

&lt;p&gt;上記のサンプルにありますbrowserサンプルを参考にしているので適宜参照します．  &lt;/p&gt;

&lt;p&gt;webpack.config.jsの中身とかはそこからの流用です．  &lt;/p&gt;

&lt;p&gt;それと間違っていることを書いてしまっている可能性があるのでここに書いてあることは参考程度に留めておくのがいいです．  &lt;/p&gt;

&lt;p&gt;一番良いのは公式のドキュメントやサンプルをチェックしていって試行錯誤していくことですが，ただそれだと私の様なアホだとサンプルコード読んでお終いとなりがちなので（私だけかもしれないが）自分でFableプロジェクトを作る方法ぐらいはここに自分用にメモして忘れた時に読む用にというのがこの記事の目的です．  &lt;/p&gt;

&lt;h1&gt;Process&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step 1: Create Project Directory&lt;br/&gt;
適当にmkdirでproject dirを作りましょう．  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 2: Create package.json&lt;br/&gt;
project dir内でnpm initなりyarn initなりでpackage.jsonを作成しておきます．  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 3: Install dependencies webpack&lt;br/&gt;
npmなら--save-dev，yarnなら-dをつけて，webpack，webpack-cli，webpack-dev-serverをインストールしておきます．  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 4: Write Script in package.json&lt;br/&gt;
&lt;code&gt;
&amp;quot;scripts&amp;quot;: {
&amp;quot;postinstall&amp;quot;: &amp;quot;dotnet tool restore&amp;quot;,
&amp;quot;start&amp;quot;: &amp;quot;dotnet fable watch src --run webpack serve&amp;quot;
}
&lt;/code&gt;
をpackage.json内に記述してください．&lt;br/&gt;
上記のはfable3-samples/browser内のをコピペしただけですので，単純にそっちからコピーしてきても良いです．  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 5: Create webpack.config.js&lt;br/&gt;
webpack.config.jsをproject dir内で作成し，
&lt;code&gt;
var path = require(&amp;quot;path&amp;quot;)
module.exports = {
mode: &amp;quot;development&amp;quot;,
entry: &amp;quot;./src/App.fs.js&amp;quot;,
output: {
    path: path.join(__dirname, &amp;quot;./public&amp;quot;),
    filename: &amp;quot;bundle.js&amp;quot;,
},
devServer: {
    contentBase: &amp;quot;./public&amp;quot;,
    port: 8080,
}
}
&lt;/code&gt;
をwebpack.config.js内に記述します．&lt;br/&gt;
上記のはfable3-samples/browser内のをコピペしただけですので，単純にそっちからコピーしてきても良いです．  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 6: Install Fable command&lt;br/&gt;
&lt;code&gt;
dotnet new tool-manifest # if you are setting up this repo
dotnet tool install --local Fable --version 3.2.1
&lt;/code&gt;
以上をproject dir内で行うと.configディレクトリとその中にdotnet-tools.jsonが作られます．&lt;br/&gt;
これでscriptを動かすために必要なコマンドが揃いました．  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 7: Create src directory&lt;br/&gt;
今まで書いてきた設定ファイルに沿ったdir nameにします．&lt;br/&gt;
つまりproject dirでmkdir srcします．&lt;br/&gt;
次からはこのsrcディレクトリ内で作業します  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 8: Create App.fsproj  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;Compile Include=&quot;App.fs&quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&quot;Fable.Browser.Dom&quot; Version=&quot;2.4.4&quot; /&amp;gt;
    &amp;lt;PackageReference Include=&quot;Fable.Core&quot; Version=&quot;3.2.7&quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;App.fsprojに上記内容を記述．  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 9: Create App.fs&lt;br/&gt;
```
module App
open Fable.Core.JsInterop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;let window = Browser.Dom.window&lt;/p&gt;

&lt;p&gt;let mutable hOne : Browser.Types.HTMLElement = unbox window.document.getElementById &amp;quot;title&amp;quot;
hOne.innerText &amp;lt;- &amp;quot;Replaced on Fable&amp;quot;
```
上記を記述．&lt;br/&gt;
このファイルがjsに変換されます．  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step 10: Set public files&lt;br/&gt;
project dirに戻り，mkdir publicして，中にindex.htmlを用意します．&lt;br/&gt;
index.htmlの中身は
&lt;code&gt;
&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Fable&amp;lt;/title&amp;gt;
  &amp;lt;meta http-equiv=&#039;Content-Type&#039; content=&#039;text/html; charset=utf-8&#039;&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
  &amp;lt;link rel=&amp;quot;shortcut icon&amp;quot; href=&amp;quot;fable.ico&amp;quot; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;Test&amp;lt;/h1&amp;gt;
&amp;lt;script src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;
でいいです．  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 11: Run&lt;br/&gt;
再びproject dirに戻り，npm run startなりyarn startなりすれば動くと思います．  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Caveman2でcookieのkeyとexpiresを変更する方法.html"/> <title>Caveman2でcookieのkeyとexpiresを変更する方法</title> <published>2021-04-19 23:47:20</published> <updated>2021-04-19 23:47:20</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;Caveman2でセッションを有効するには，app.lispにあるbuilderマクロで&lt;code&gt;:session&lt;/code&gt;を書けばいいことはREADMEに書かれているのでそこは問題無いのですが，cookieのexpiresやセッション名となっているcookieキーの変更方法は書かれておらずソースを読む必要がありました．   &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fukamachi/lack/blob/master/src/builder.lisp&quot; &gt;https://github.com/fukamachi/lack/blob/master/src/builder.lisp&lt;/a&gt;を読むとlackのミドルウェアか判別して実行する展開する箇所があります．
:sessionを渡すとlack.middleware.sessionを実行するということなので，&lt;br/&gt;
&lt;a href=&quot;https://github.com/fukamachi/lack/blob/master/src/middleware/session.lisp&quot; &gt;https://github.com/fukamachi/lack/blob/master/src/middleware/session.lisp&lt;/a&gt;を読むとstateキーのデフォルトとしてmake-cookie-stateを使っているのわかります．  &lt;/p&gt;

&lt;p&gt;app.lisp内で:lack.middleware.session.state.cookieをインポートして，builder内で&lt;br/&gt;
&lt;code&gt;
 (:session
  :state (make-cookie-state
          :httponly t
          :cookie-key &amp;quot;myapp.session&amp;quot;
          :expires 1800))
&lt;/code&gt;
すればset-cookieの値が変わっているはずです．&lt;/p&gt;

&lt;p&gt;このcookie-stateは構造体であり&lt;a href=&quot;https://github.com/fukamachi/lack/blob/master/src/middleware/session/state/cookie.lisp&quot; &gt;https://github.com/fukamachi/lack/blob/master/src/middleware/session/state/cookie.lisp&lt;/a&gt;で定義されています．   &lt;/p&gt;

&lt;p&gt;「cookieを生成した現在時刻+make-cookie-stateのexpiresキーで渡した秒数」が最終的なexpiresになるのでこの例だと30分有効ということになります．  &lt;/p&gt;

&lt;p&gt;個人的にはsamesiteを入れたいのですが入り組んでいて私ではわかりづらく難航しています．   &lt;/p&gt;

&lt;p&gt;まぁ元のlackの該当箇所を書き換えてしまった方が早いですが．&lt;/p&gt;

&lt;h3&gt;追記(2021-05-07)&lt;/h3&gt;

&lt;p&gt;私がlackに出していたPRがマージされたので現在のバージョンであれば，&lt;br/&gt;
&lt;code&gt;
(:session
    :state (make-cookie-state
            :samesite :lax))
&lt;/code&gt;
の様にキーワードで渡してsamesiteキーワードに渡してやればSet-CookieにSameSite=Laxが追加されます．&lt;br/&gt;
何も指定しなければNoneになります．&lt;br/&gt;
Strictにするには:strictキーワードをどうぞ．&lt;/p&gt;

&lt;h3&gt;追記(2021/05/07 16:50 JST)&lt;/h3&gt;

&lt;p&gt;caveman2 projectのproject-name.asdの:depends-on内で&amp;quot;lack.middleware.session&amp;quot;かそれをインポートしているライブラリを指定する必要があるということを書いておくのを忘れていました．  &lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Tidalを試しにインストールした際に躓いた点.html"/> <title>Tidalを試しにインストールした際に躓いた点</title> <published>2020-11-03 10:11:15</published> <updated>2020-11-03 10:11:15</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;TidalCyclesはライブコーディングで作曲等ができるというものですが，インストールが若干面倒です．
SuperColiderとかDirtのインストールは躓く要素が無いので省きます． &lt;/p&gt;

&lt;p&gt;Tidalはwikiに書かれている方法だと導入方法がcabal install tidalですがWindows環境でどうもこれが上手く行きません．GHCIでインポートしようにも見つからないという旨のエラーが出ます． &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tidalcycles/tidal-chocolatey/issues/3&quot; &gt;https://github.com/tidalcycles/tidal-chocolatey/issues/3&lt;/a&gt;を参照すると&lt;code&gt;cabal v1-install tidal&lt;/code&gt;すると動くらしくて実際に私の環境ではこっちで動作しました． &lt;/p&gt;

&lt;p&gt;Windows上でのHaskell周りさっぱり分かりません．&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Windows10-20H2-on-KVMでvirtioを後から使う際にINACCESSIBLEBOOTDEVICEに遭遇した.html"/> <title>Windows10 20H2 on KVMでvirtioを後から使う際にINACCESSIBLE_BOOT_DEVICEに遭遇した</title> <published>2020-10-27 23:55:02</published> <updated>2020-10-27 23:55:02</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;解決方法を調べてみるとネットで転がっているのはbcdeditを使うものばかりですが，私の環境では上手くいきませんでした．&lt;br/&gt;
まぁ要するにvirtioドライバを読み込むようにすれば良いのでWindowsが入っているストレージはSATA等の正常に起動できるやつに戻しておいて，&lt;br/&gt;
ブートに関係ないセカンドストレージとして適当にvirtioなストレージを追加して普通にブートするだけでbcdeditで解決する例と同じことができます．    &lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/VOICEROIDの旧製品のインストール時のブルスク回避方法.html"/> <title>VOICEROIDの旧製品のインストール時のブルスク回避方法</title> <published>2020-09-04 08:15:05</published> <updated>2020-09-04 08:15:05</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;現行(2010-09-04時点)のWindows10ですとVOICEROID EXで認証に使われているHASPが少なくとも昔私買ったDVD版だと古くてhardlock.sysがクラッシュしてブルスクします．&lt;br/&gt;
AIのFAQ&lt;a href=&quot;https://www.ai-j.jp/qa/q6/&quot; &gt;https://www.ai-j.jp/qa/q6/&lt;/a&gt;を見るとThales社のサイトから最新版をダウンロードしてインストールすればう良いようです．&lt;br/&gt;
ボイロのインストールに失敗した後にやるとその旨のダイアログが出ますが強行すればいけます．&lt;br/&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/最近はKotlinやRustをちょくちょくやってるというお話.html"/> <title>最近はKotlinやRustをちょくちょくやってるというお話</title> <published>2020-08-28 22:42:08</published> <updated>2020-08-28 22:42:08</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;特にこれといったことはないのだが，RustはNightly依存のライブラリにちょくちょく遭遇するのでstable運用したい時に困るなぁとかKotlinで簡単なAndroidアプリを作ってみたがAPI周りに苦しんだりJavaで書かれたサンプルばかりに遭遇するので面倒とかいう感想だけです．つらみ．&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Gaming-PCを組んでみて.html"/> <title>Gaming PCを組んでみて</title> <published>2020-08-15 11:53:19</published> <updated>2020-08-15 11:53:19</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;長い間iMac mid 2011 21.5incをメインで使いつづけていたのですが、macOSはHigh Sierraまでしか使えずスペックも流石に辛く、PCを新調することしました。&lt;br/&gt;
最初はBTOにしようかと考えていたのですが、最終税抜価格に10%の消費税かかるのはエゲつなさを感じましたし、電源などのパーツでどのメーカーのを使っているのかとか考えると納得はできず、結局自作です。&lt;br/&gt;
一度もやったことないので工具とか揃えたので予想よりは高くついたのですがまぁまぁ楽しかったです。&lt;br/&gt;
電源はちゃんとしたメーカーのを使わないと気が気じゃないので。  &lt;/p&gt;

&lt;p&gt;Ryzen3600x + Radeon 5700XT(Sapphire Nitro+) + nvme m2 SSDは想像以上に快適でさいこーってなってます。いやまぁiMac mid 2011からの移行ならどれでもそうだろうと言われそうですがそうですねはい。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Caveman2を利用する時の備忘録的なやつ.html"/> <title>Caveman2を利用する時の備忘録的なやつ</title> <published>2020-03-24 17:17:29</published> <updated>2020-03-24 17:17:29</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;p&gt;Sessionはデフォルトだとインメモリーに保存されていますがapp.lispを編集すればDBに保存できます．&lt;/p&gt;

&lt;p&gt;やり方自体はリポジトリにあるREADME読んでやれば良いですが，sessionsテーブルを要求してくるので作っておく必要があります（私の誤認識かもしれませんのであしからず）．&lt;/p&gt;

&lt;p&gt;以下のSQL文のyour_database_nameを各自変更し実行すればいけると思います．&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE your_database_name.sessions (id CHAR(72) PRIMARY KEY, session_data TEXT, created_at DATETIME, updated_at DATETIME);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&#039;(vector (unsigned-byte 8))を返す時にはlack形式で渡す必要があるのでdefroute内で下記の様にする．&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(let ((octet (sb-ext:string-to-octets :external-format :CP932))
      (content-length (length octet))
      (status 200)
      (content-type &quot;text/plain&quot;))
   `(,status (:content-type ,content-type :content-length ,content-length) ,octet))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;尚ファイルを読み込む場合は上記の様な面倒なことはせずにpathnameを返り値にすれば良いです．&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/Unofficial-Lineage-OS-171-on-Nexus-6Pの導入方法のメモ.html"/> <title>Unofficial Lineage OS 17.1 on Nexus 6Pの導入方法のメモ</title> <published>2020-02-01 22:26:48</published> <updated>2020-02-01 22:26:48</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;!-- **** your post here (remove this line) **** --&gt;

&lt;!-- format: could be &#039;html&#039; (for raw html) or &#039;md&#039; (for markdown).  --&gt;

&lt;p&gt;adb，fastboot導入済み且つ，PC側のOSはDebian10，Nexus6Pはファクトリーリセット済みて書かれた記事ということ踏まえて読んでください．&lt;/p&gt;

&lt;p&gt;また，下記を実行して文鎮化しても責任は取れません．やるならあくまでも自己責任で．&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://forum.xda-developers.com/nexus-6p/orig-development/rom-lineageos-17-0-nexus-6p-angler-t4012099&quot;&gt;Xdaへのリンク&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;oem unlockedなNexus 6Pを用意して，上記リンクのスレッドの#3からFBE Recovery(4 Core)をダウンロードして，電源を切り，電源ボタンとボリュームキー下を押し続けるとブートローダー画面になるので下記を実行します．&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastboot flash recovery twrp-3.3.1.0-FBE-10-angler4core.img&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;後はボリュームキーで操作し，電源ボタンで決定してリカバリーモードを起動させます．&lt;/p&gt;

&lt;p&gt;そうしたら，Wipeメニューからsystem，data，cacheをwipeしてからフォーマットを実行してください．&lt;/p&gt;

&lt;p&gt;USBで繋げるとマウントされるので適当に上記リンク先にあるカスタムROMzipをダウンロードして，必要であるならばopengapps nano or picoをopengapps公式からダウンロードして，internalに放りこんでから，twrpのinstallをタップ，ファイルを選択してください．&lt;/p&gt;

&lt;p&gt;opengappsを入れる場合は先にカスタムROMなzipを選択してから，more zipで追加してください．&lt;/p&gt;

&lt;p&gt;インストールし終ったら，dalvik cacheをwipeするボタンが出るのでしてから，リブートしてください．&lt;/p&gt;

&lt;p&gt;twrpアプリをインストールするか尋ねてきますがしないように．&lt;/p&gt;

&lt;p&gt;リブートしてしばらく経てばOSが起動すると思いますが，失敗することがあるかもしれません．冒頭に書いてあるようにあくまでもやるなら自己責任で．以上． &lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="https://madosuki.github.io/blog/posts/ジェネレーター変えてみたのでテストポスト.html"/> <title>ジェネレーター変えてみたのでテストポスト</title> <published>2020-01-29 08:44:51</published> <updated>2020-01-29 08:44:51</updated> <author> <name>madosuki</name> <uri>https://madosuki.github.io/blog</uri> </author> <content type="html">&lt;!-- **** your post here (remove this line) **** --&gt;

&lt;!-- format: could be &#039;html&#039; (for raw html) or &#039;md&#039; (for markdown).  --&gt;

&lt;p&gt;とりあえず，ブログジェネレーターをcoleslawに変えてみました．&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry> </feed>