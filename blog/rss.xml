<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel> <title>(随筆 :tendency 自堕落)</title> <link>https://madosuki.github.io/blog</link> <atom:link href="https://madosuki.github.io/blog/rss.xml" rel="self" type="application/rss+xml" /> <language>en-us</language> <pubDate>Sat, 29 May 2021 12:57:22 +0900</pubDate> <item> <title>Fableを試してみる前にやったこと</title> <link>https://madosuki.github.io/blog/posts/Fableを試してみる前にやったこと.html</link> <pubDate>2021-05-29 11:26:48</pubDate> <author>madosuki</author> <guid isPermaLink="true">https://madosuki.github.io/blog/posts/Fableを試してみる前にやったこと.html</guid> <category><![CDATA[ Fsharp ]]></category> <description><![CDATA[ <p>FableはF#コードをJavaScriptに変換してくれるやつです．<br/>
サンプルを試すだけなら<a href="https://github.com/fable-compiler/fable3-samples" >https://github.com/fable-compiler/fable3-samples</a>をgit cloneしてよしなにすれば良いのですが，自プロジェクトだと1から用意したくなります．なりますよね？  </p>

<p>公式チュートリアルだとテンプレートをインポートさせてdotnet newで簡単にできるようにする方法が紹介されていますが，この記事執筆時点では公式が用意しているテンプレートですとFable3に対応していないという注意書きも書かれています．  </p>

<p>仕方ないので手動で用意するかってなりました．まぁ私が知らないだけでもっとスマートなやり方がある気がしますが．  </p>

<p>dotnet sdkとnodejsのインストールはmustなので割愛します．  </p>

<p>上記のサンプルにありますbrowserサンプルを参考にしているので適宜参照します．  </p>

<p>webpack.config.jsの中身とかはそこからの流用です．  </p>

<p>それと間違っていることを書いてしまっている可能性があるのでここに書いてあることは参考程度に留めておくのがいいです．  </p>

<p>一番良いのは公式のドキュメントやサンプルをチェックしていって試行錯誤していくことですが，ただそれだと私の様なアホだとサンプルコード読んでお終いとなりがちなので（私だけかもしれないが）自分でFableプロジェクトを作る方法ぐらいはここに自分用にメモして忘れた時に読む用にというのがこの記事の目的です．  </p>

<h1>Process</h1>

<ul>
<li><p>Step 1: Create Project Directory
適当にmkdirでproject dirを作りましょう．  </p></li>
<li><p>Step 2: Create package.json
project dir内でnpm initなりyarn initなりでpackage.jsonを作成しておきます．  </p></li>
<li><p>Step 3: Install dependencies webpack
npmなら--save-dev，yarnなら-dをつけて，webpack，webpack-cli，webpack-dev-serverをインストールしておきます．  </p></li>
<li><p>Step 4: Write Script in package.json
<code>
&quot;scripts&quot;: {
&quot;postinstall&quot;: &quot;dotnet tool restore&quot;,
&quot;start&quot;: &quot;dotnet fable watch src --run webpack serve&quot;
}
</code>
をpackage.json内に記述してください．<br/>
上記のはfable3-samples/browser内のをコピペしただけですので，単純にそっちからコピーしてきても良いです．  </p></li>
<li><p>Step 5: Create webpack.config.js
webpack.config.jsをproject dir内で作成し，
<code>
var path = require(&quot;path&quot;)
module.exports = {
mode: &quot;development&quot;,
entry: &quot;./src/App.fs.js&quot;,
output: {
    path: path.join(__dirname, &quot;./public&quot;),
    filename: &quot;bundle.js&quot;,
},
devServer: {
    contentBase: &quot;./public&quot;,
    port: 8080,
}
}
</code>
をwebpack.config.js内に記述します．<br/>
上記のはfable3-samples/browser内のをコピペしただけですので，単純にそっちからコピーしてきても良いです．  </p></li>
<li><p>Step 6: Install Fable command
<code>
dotnet new tool-manifest # if you are setting up this repo
dotnet tool install --local Fable --version 3.2.1
</code>
以上をproject dir内で行うと.configディレクトリとその中にdotnet-tools.jsonが作られます．<br/>
これでscriptを動かすために必要なコマンドが揃いました．  </p></li>
<li><p>Step 7: Create src directory
今まで書いてきた設定ファイルに沿ったdir nameにします．<br/>
つまりproject dirでmkdir srcします．<br/>
次からはこのsrcディレクトリ内で作業します  </p></li>
<li><p>Step 8: Create App.fsproj
```
<Project Sdk="Microsoft.NET.Sdk"></p></li>
</ul>

<p><PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup></p>

<p><ItemGroup>
    <Compile Include="App.fs" />
  </ItemGroup></p>

<p><ItemGroup>
    <PackageReference Include="Fable.Browser.Dom" Version="2.4.4" />
    <PackageReference Include="Fable.Core" Version="3.2.7" />
  </ItemGroup></p>

<p></Project>
```
App.fsprojに上記内容を記述．  </p>

<ul>
<li>Step 9: Create App.fs
```
module App
open Fable.Core.JsInterop</li>
</ul>

<p>let window = Browser.Dom.window</p>

<p>let mutable hOne : Browser.Types.HTMLElement = unbox window.document.getElementById &quot;title&quot;
hOne.innerText &lt;- &quot;Replaced on Fable&quot;
```
上記を記述．<br/>
このファイルがjsに変換されます．  </p>

<ul>
<li><p>Step 10: Set public files
project dirに戻り，mkdir publicして，中にindex.htmlを用意します．<br/>
index.htmlの中身は
<code>
&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Fable&lt;/title&gt;
  &lt;meta http-equiv='Content-Type' content='text/html; charset=utf-8'&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
  &lt;link rel=&quot;shortcut icon&quot; href=&quot;fable.ico&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1 id=&quot;title&quot;&gt;Test&lt;/h1&gt;
&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code>
でいいです．  </p></li>
<li><p>Step 11: Run
再びproject dirに戻り，npm run startなりyarn startなりすれば動くと思います．  </p></li>
</ul>

<!--more-->

<p>Excerpt separator can also be extracted from content.
Add <code>excerpt: &lt;string&gt;</code> to the above metadata.
Excerpt separator is <code>&lt;!--more--&gt;</code> by default.</p>
 ]]></description> </item><item> <title>Caveman2でcookieのkeyとexpiresを変更する方法</title> <link>https://madosuki.github.io/blog/posts/Caveman2でcookieのkeyとexpiresを変更する方法.html</link> <pubDate>2021-04-19 23:47:20</pubDate> <author>madosuki</author> <guid isPermaLink="true">https://madosuki.github.io/blog/posts/Caveman2でcookieのkeyとexpiresを変更する方法.html</guid> <category><![CDATA[ common lisp ]]></category> <description><![CDATA[ <p>Caveman2でセッションを有効するには，app.lispにあるbuilderマクロで<code>:session</code>を書けばいいことはREADMEに書かれているのでそこは問題無いのですが，cookieのexpiresやセッション名となっているcookieキーの変更方法は書かれておらずソースを読む必要がありました．   </p>

<p><a href="https://github.com/fukamachi/lack/blob/master/src/builder.lisp" >https://github.com/fukamachi/lack/blob/master/src/builder.lisp</a>を読むとlackのミドルウェアか判別して実行する展開する箇所があります．
:sessionを渡すとlack.middleware.sessionを実行するということなので，<br/>
<a href="https://github.com/fukamachi/lack/blob/master/src/middleware/session.lisp" >https://github.com/fukamachi/lack/blob/master/src/middleware/session.lisp</a>を読むとstateキーのデフォルトとしてmake-cookie-stateを使っているのわかります．  </p>

<p>app.lisp内で:lack.middleware.session.state.cookieをインポートして，builder内で<br/>
<code>
 (:session
  :state (make-cookie-state
          :httponly t
          :cookie-key &quot;myapp.session&quot;
          :expires 1800))
</code>
すればset-cookieの値が変わっているはずです．</p>

<p>このcookie-stateは構造体であり<a href="https://github.com/fukamachi/lack/blob/master/src/middleware/session/state/cookie.lisp" >https://github.com/fukamachi/lack/blob/master/src/middleware/session/state/cookie.lisp</a>で定義されています．   </p>

<p>「cookieを生成した現在時刻+make-cookie-stateのexpiresキーで渡した秒数」が最終的なexpiresになるのでこの例だと30分有効ということになります．  </p>

<p>個人的にはsamesiteを入れたいのですが入り組んでいて私ではわかりづらく難航しています．   </p>

<p>まぁ元のlackの該当箇所を書き換えてしまった方が早いですが．</p>

<h3>追記(2021-05-07)</h3>

<p>私がlackに出していたPRがマージされたので現在のバージョンであれば，<br/>
<code>
(:session
    :state (make-cookie-state
            :samesite :lax))
</code>
の様にキーワードで渡してsamesiteキーワードに渡してやればSet-CookieにSameSite=Laxが追加されます．<br/>
何も指定しなければNoneになります．<br/>
Strictにするには:strictキーワードをどうぞ．</p>

<h3>追記(2021/05/07 16:50 JST)</h3>

<p>caveman2 projectのproject-name.asdの:depends-on内で&quot;lack.middleware.session&quot;かそれをインポートしているライブラリを指定する必要があるということを書いておくのを忘れていました．  </p>

<!--more-->

<p>Excerpt separator can also be extracted from content.
Add <code>excerpt: &lt;string&gt;</code> to the above metadata.
Excerpt separator is <code>&lt;!--more--&gt;</code> by default.</p>
 ]]></description> </item><item> <title>Tidalを試しにインストールした際に躓いた点</title> <link>https://madosuki.github.io/blog/posts/Tidalを試しにインストールした際に躓いた点.html</link> <pubDate>2020-11-03 10:11:15</pubDate> <author>madosuki</author> <guid isPermaLink="true">https://madosuki.github.io/blog/posts/Tidalを試しにインストールした際に躓いた点.html</guid> <category><![CDATA[ tidal ]]></category><category><![CDATA[ haskell ]]></category> <description><![CDATA[ <p>TidalCyclesはライブコーディングで作曲等ができるというものですが，インストールが若干面倒です．
SuperColiderとかDirtのインストールは躓く要素が無いので省きます． </p>

<p>Tidalはwikiに書かれている方法だと導入方法がcabal install tidalですがWindows環境でどうもこれが上手く行きません．GHCIでインポートしようにも見つからないという旨のエラーが出ます． </p>

<p><a href="https://github.com/tidalcycles/tidal-chocolatey/issues/3" >https://github.com/tidalcycles/tidal-chocolatey/issues/3</a>を参照すると<code>cabal v1-install tidal</code>すると動くらしくて実際に私の環境ではこっちで動作しました． </p>

<p>Windows上でのHaskell周りさっぱり分かりません．</p>

<!--more-->

<p>Excerpt separator can also be extracted from content.
Add <code>excerpt: &lt;string&gt;</code> to the above metadata.
Excerpt separator is <code>&lt;!--more--&gt;</code> by default.</p>
 ]]></description> </item><item> <title>Windows10 20H2 on KVMでvirtioを後から使う際にINACCESSIBLE_BOOT_DEVICEに遭遇した</title> <link>https://madosuki.github.io/blog/posts/Windows10-20H2-on-KVMでvirtioを後から使う際にINACCESSIBLEBOOTDEVICEに遭遇した.html</link> <pubDate>2020-10-27 23:55:02</pubDate> <author>madosuki</author> <guid isPermaLink="true">https://madosuki.github.io/blog/posts/Windows10-20H2-on-KVMでvirtioを後から使う際にINACCESSIBLEBOOTDEVICEに遭遇した.html</guid> <category><![CDATA[ KVM ]]></category><category><![CDATA[ Linux ]]></category><category><![CDATA[ Windows ]]></category> <description><![CDATA[ <p>解決方法を調べてみるとネットで転がっているのはbcdeditを使うものばかりですが，私の環境では上手くいきませんでした．<br/>
まぁ要するにvirtioドライバを読み込むようにすれば良いのでWindowsが入っているストレージはSATA等の正常に起動できるやつに戻しておいて，<br/>
ブートに関係ないセカンドストレージとして適当にvirtioなストレージを追加して普通にブートするだけでbcdeditで解決する例と同じことができます．    </p>

<!--more-->

<p>Excerpt separator can also be extracted from content.
Add <code>excerpt: &lt;string&gt;</code> to the above metadata.
Excerpt separator is <code>&lt;!--more--&gt;</code> by default.</p>
 ]]></description> </item><item> <title>VOICEROIDの旧製品のインストール時のブルスク回避方法</title> <link>https://madosuki.github.io/blog/posts/VOICEROIDの旧製品のインストール時のブルスク回避方法.html</link> <pubDate>2020-09-04 08:15:05</pubDate> <author>madosuki</author> <guid isPermaLink="true">https://madosuki.github.io/blog/posts/VOICEROIDの旧製品のインストール時のブルスク回避方法.html</guid> <category><![CDATA[ vOICEROID ]]></category> <description><![CDATA[ <p>現行(2010-09-04時点)のWindows10ですとVOICEROID EXで認証に使われているHASPが少なくとも昔私買ったDVD版だと古くてhardlock.sysがクラッシュしてブルスクします．<br/>
AIのFAQ<a href="https://www.ai-j.jp/qa/q6/" >https://www.ai-j.jp/qa/q6/</a>を見るとThales社のサイトから最新版をダウンロードしてインストールすればう良いようです．<br/>
ボイロのインストールに失敗した後にやるとその旨のダイアログが出ますが強行すればいけます．<br/>
<!--more--></p>

<p>Excerpt separator can also be extracted from content.
Add <code>excerpt: &lt;string&gt;</code> to the above metadata.
Excerpt separator is <code>&lt;!--more--&gt;</code> by default.</p>
 ]]></description> </item><item> <title>最近はKotlinやRustをちょくちょくやってるというお話</title> <link>https://madosuki.github.io/blog/posts/最近はKotlinやRustをちょくちょくやってるというお話.html</link> <pubDate>2020-08-28 22:42:08</pubDate> <author>madosuki</author> <guid isPermaLink="true">https://madosuki.github.io/blog/posts/最近はKotlinやRustをちょくちょくやってるというお話.html</guid> <category><![CDATA[ pets ]]></category><category><![CDATA[ animal ]]></category> <description><![CDATA[ <p>特にこれといったことはないのだが，RustはNightly依存のライブラリにちょくちょく遭遇するのでstable運用したい時に困るなぁとかKotlinで簡単なAndroidアプリを作ってみたがAPI周りに苦しんだりJavaで書かれたサンプルばかりに遭遇するので面倒とかいう感想だけです．つらみ．</p>

<!--more-->

<p>Excerpt separator can also be extracted from content.
Add <code>excerpt: &lt;string&gt;</code> to the above metadata.
Excerpt separator is <code>&lt;!--more--&gt;</code> by default.</p>
 ]]></description> </item><item> <title>Gaming PCを組んでみて</title> <link>https://madosuki.github.io/blog/posts/Gaming-PCを組んでみて.html</link> <pubDate>2020-08-15 11:53:19</pubDate> <author>madosuki</author> <guid isPermaLink="true">https://madosuki.github.io/blog/posts/Gaming-PCを組んでみて.html</guid> <category><![CDATA[ none ]]></category> <description><![CDATA[ <p>長い間iMac mid 2011 21.5incをメインで使いつづけていたのですが、macOSはHigh Sierraまでしか使えずスペックも流石に辛く、PCを新調することしました。<br/>
最初はBTOにしようかと考えていたのですが、最終税抜価格に10%の消費税かかるのはエゲつなさを感じましたし、電源などのパーツでどのメーカーのを使っているのかとか考えると納得はできず、結局自作です。<br/>
一度もやったことないので工具とか揃えたので予想よりは高くついたのですがまぁまぁ楽しかったです。<br/>
電源はちゃんとしたメーカーのを使わないと気が気じゃないので。  </p>

<p>Ryzen3600x + Radeon 5700XT(Sapphire Nitro+) + nvme m2 SSDは想像以上に快適でさいこーってなってます。いやまぁiMac mid 2011からの移行ならどれでもそうだろうと言われそうですがそうですねはい。</p>

<!--more-->

<p>Excerpt separator can also be extracted from content.
Add <code>excerpt: &lt;string&gt;</code> to the above metadata.
Excerpt separator is <code>&lt;!--more--&gt;</code> by default.</p>
 ]]></description> </item><item> <title>Caveman2を利用する時の備忘録的なやつ</title> <link>https://madosuki.github.io/blog/posts/Caveman2を利用する時の備忘録的なやつ.html</link> <pubDate>2020-03-24 17:17:29</pubDate> <author>madosuki</author> <guid isPermaLink="true">https://madosuki.github.io/blog/posts/Caveman2を利用する時の備忘録的なやつ.html</guid> <category><![CDATA[ CommonLisp ]]></category> <description><![CDATA[ <p>Sessionはデフォルトだとインメモリーに保存されていますがapp.lispを編集すればDBに保存できます．</p>

<p>やり方自体はリポジトリにあるREADME読んでやれば良いですが，sessionsテーブルを要求してくるので作っておく必要があります（私の誤認識かもしれませんのであしからず）．</p>

<p>以下のSQL文のyour_database_nameを各自変更し実行すればいけると思います．</p>

<pre><code>CREATE TABLE your_database_name.sessions (id CHAR(72) PRIMARY KEY, session_data TEXT, created_at DATETIME, updated_at DATETIME);</code></pre>

<p>'(vector (unsigned-byte 8))を返す時にはlack形式で渡す必要があるのでdefroute内で下記の様にする．</p>

<pre><code>(let ((octet (sb-ext:string-to-octets :external-format :CP932))
      (content-length (length octet))
      (status 200)
      (content-type "text/plain"))
   `(,status (:content-type ,content-type :content-length ,content-length) ,octet))</code></pre>

<p>尚ファイルを読み込む場合は上記の様な面倒なことはせずにpathnameを返り値にすれば良いです．</p>

<!--more-->

<p>Excerpt separator can also be extracted from content.
Add <code>excerpt: &lt;string&gt;</code> to the above metadata.
Excerpt separator is <code>&lt;!--more--&gt;</code> by default.</p>
 ]]></description> </item><item> <title>Unofficial Lineage OS 17.1 on Nexus 6Pの導入方法のメモ</title> <link>https://madosuki.github.io/blog/posts/Unofficial-Lineage-OS-171-on-Nexus-6Pの導入方法のメモ.html</link> <pubDate>2020-02-01 22:26:48</pubDate> <author>madosuki</author> <guid isPermaLink="true">https://madosuki.github.io/blog/posts/Unofficial-Lineage-OS-171-on-Nexus-6Pの導入方法のメモ.html</guid> <category><![CDATA[ Android ]]></category> <description><![CDATA[ <!-- **** your post here (remove this line) **** -->

<!-- format: could be 'html' (for raw html) or 'md' (for markdown).  -->

<p>adb，fastboot導入済み且つ，PC側のOSはDebian10，Nexus6Pはファクトリーリセット済みて書かれた記事ということ踏まえて読んでください．</p>

<p>また，下記を実行して文鎮化しても責任は取れません．やるならあくまでも自己責任で．</p>

<p><a href="https://forum.xda-developers.com/nexus-6p/orig-development/rom-lineageos-17-0-nexus-6p-angler-t4012099">Xdaへのリンク</a></p>

<p>oem unlockedなNexus 6Pを用意して，上記リンクのスレッドの#3からFBE Recovery(4 Core)をダウンロードして，電源を切り，電源ボタンとボリュームキー下を押し続けるとブートローダー画面になるので下記を実行します．</p>

<pre><code>fastboot flash recovery twrp-3.3.1.0-FBE-10-angler4core.img</code></pre>

<p>後はボリュームキーで操作し，電源ボタンで決定してリカバリーモードを起動させます．</p>

<p>そうしたら，Wipeメニューからsystem，data，cacheをwipeしてからフォーマットを実行してください．</p>

<p>USBで繋げるとマウントされるので適当に上記リンク先にあるカスタムROMzipをダウンロードして，必要であるならばopengapps nano or picoをopengapps公式からダウンロードして，internalに放りこんでから，twrpのinstallをタップ，ファイルを選択してください．</p>

<p>opengappsを入れる場合は先にカスタムROMなzipを選択してから，more zipで追加してください．</p>

<p>インストールし終ったら，dalvik cacheをwipeするボタンが出るのでしてから，リブートしてください．</p>

<p>twrpアプリをインストールするか尋ねてきますがしないように．</p>

<p>リブートしてしばらく経てばOSが起動すると思いますが，失敗することがあるかもしれません．冒頭に書いてあるようにあくまでもやるなら自己責任で．以上． </p>

<!--more-->

<p>Excerpt separator can also be extracted from content.
Add <code>excerpt: &lt;string&gt;</code> to the above metadata.
Excerpt separator is <code>&lt;!--more--&gt;</code> by default.</p>
 ]]></description> </item><item> <title>ジェネレーター変えてみたのでテストポスト</title> <link>https://madosuki.github.io/blog/posts/ジェネレーター変えてみたのでテストポスト.html</link> <pubDate>2020-01-29 08:44:51</pubDate> <author>madosuki</author> <guid isPermaLink="true">https://madosuki.github.io/blog/posts/ジェネレーター変えてみたのでテストポスト.html</guid>  <description><![CDATA[ <!-- **** your post here (remove this line) **** -->

<!-- format: could be 'html' (for raw html) or 'md' (for markdown).  -->

<p>とりあえず，ブログジェネレーターをcoleslawに変えてみました．</p>

<!--more-->

<p>Excerpt separator can also be extracted from content.
Add <code>excerpt: &lt;string&gt;</code> to the above metadata.
Excerpt separator is <code>&lt;!--more--&gt;</code> by default.</p>
 ]]></description> </item> </channel> </rss>